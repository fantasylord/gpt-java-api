<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lord.local.gptjavaapi.dao.CallBackInfoDao">
  <resultMap id="BaseResultMap" type="com.lord.local.gptjavaapi.dao.entity.CallBackInfo">
    <id column="call_back_id" jdbcType="INTEGER" property="callBackId" />
    <result column="call_back_request" jdbcType="VARCHAR" property="callBackRequest" />
    <result column="call_back_response" jdbcType="VARCHAR" property="callBackResponse" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.lord.local.gptjavaapi.dao.entity.CallBackInfo">
    <result column="call_back_errors" jdbcType="LONGVARCHAR" property="callBackErrors" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    call_back_id, call_back_request, call_back_response
  </sql>
  <sql id="Blob_Column_List">
    call_back_errors
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.lord.local.gptjavaapi.dao.entity.CallBackInfoExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from call_back_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByExample" parameterType="com.lord.local.gptjavaapi.dao.entity.CallBackInfoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from call_back_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from call_back_info
    where call_back_id = #{callBackId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from call_back_info
    where call_back_id = #{callBackId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.lord.local.gptjavaapi.dao.entity.CallBackInfoExample">
    delete from call_back_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="call_back_id" keyProperty="callBackId" parameterType="com.lord.local.gptjavaapi.dao.entity.CallBackInfo" useGeneratedKeys="true">
    insert into call_back_info (call_back_request, call_back_response, 
      call_back_errors)
    values (#{callBackRequest,jdbcType=VARCHAR}, #{callBackResponse,jdbcType=VARCHAR}, 
      #{callBackErrors,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" keyColumn="call_back_id" keyProperty="callBackId" parameterType="com.lord.local.gptjavaapi.dao.entity.CallBackInfo" useGeneratedKeys="true">
    insert into call_back_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="callBackRequest != null">
        call_back_request,
      </if>
      <if test="callBackResponse != null">
        call_back_response,
      </if>
      <if test="callBackErrors != null">
        call_back_errors,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="callBackRequest != null">
        #{callBackRequest,jdbcType=VARCHAR},
      </if>
      <if test="callBackResponse != null">
        #{callBackResponse,jdbcType=VARCHAR},
      </if>
      <if test="callBackErrors != null">
        #{callBackErrors,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lord.local.gptjavaapi.dao.entity.CallBackInfoExample" resultType="java.lang.Long">
    select count(*) from call_back_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update call_back_info
    <set>
      <if test="record.callBackId != null">
        call_back_id = #{record.callBackId,jdbcType=INTEGER},
      </if>
      <if test="record.callBackRequest != null">
        call_back_request = #{record.callBackRequest,jdbcType=VARCHAR},
      </if>
      <if test="record.callBackResponse != null">
        call_back_response = #{record.callBackResponse,jdbcType=VARCHAR},
      </if>
      <if test="record.callBackErrors != null">
        call_back_errors = #{record.callBackErrors,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update call_back_info
    set call_back_id = #{record.callBackId,jdbcType=INTEGER},
      call_back_request = #{record.callBackRequest,jdbcType=VARCHAR},
      call_back_response = #{record.callBackResponse,jdbcType=VARCHAR},
      call_back_errors = #{record.callBackErrors,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update call_back_info
    set call_back_id = #{record.callBackId,jdbcType=INTEGER},
      call_back_request = #{record.callBackRequest,jdbcType=VARCHAR},
      call_back_response = #{record.callBackResponse,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lord.local.gptjavaapi.dao.entity.CallBackInfo">
    update call_back_info
    <set>
      <if test="callBackRequest != null">
        call_back_request = #{callBackRequest,jdbcType=VARCHAR},
      </if>
      <if test="callBackResponse != null">
        call_back_response = #{callBackResponse,jdbcType=VARCHAR},
      </if>
      <if test="callBackErrors != null">
        call_back_errors = #{callBackErrors,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where call_back_id = #{callBackId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.lord.local.gptjavaapi.dao.entity.CallBackInfo">
    update call_back_info
    set call_back_request = #{callBackRequest,jdbcType=VARCHAR},
      call_back_response = #{callBackResponse,jdbcType=VARCHAR},
      call_back_errors = #{callBackErrors,jdbcType=LONGVARCHAR}
    where call_back_id = #{callBackId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lord.local.gptjavaapi.dao.entity.CallBackInfo">
    update call_back_info
    set call_back_request = #{callBackRequest,jdbcType=VARCHAR},
      call_back_response = #{callBackResponse,jdbcType=VARCHAR}
    where call_back_id = #{callBackId,jdbcType=INTEGER}
  </update>
</mapper>